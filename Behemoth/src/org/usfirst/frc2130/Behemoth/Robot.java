// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2130.Behemoth;

import edu.wpi.cscore.UsbCamera; 
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot; 
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.networktables.NetworkTable;


import org.usfirst.frc2130.Behemoth.commands.*;
import org.usfirst.frc2130.Behemoth.subsystems.*;

import java.awt.Image;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	
	// Builds a network table.
	NetworkTable table;
	
	// The first step in building our smart dashboard autonomous buttons, gives us the ability to "choose" between them.
	SendableChooser chooser;
	
	int mode = 1;

	//int currSession;
	//int sessionfront;
	//int sessionback;
	//Image frame;
	
    Command autonomousCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static FlyWheel flyWheel;
    public static Hood hood;
    public static Turntable turntable;
    public static Intake intake;
    public static Indexer indexer;
    public static Winch winch;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	
    	table = NetworkTable.getTable("dataTable");
    	
    	chooser = new SendableChooser();
    	// Add all of our autonomous commands here, in the style that the default autonomous command was added.
    	// The name we will see is in parentheses, the name of the command comes after the word "new."
    	chooser.addObject("Autonomous Command", new AutonomousCommand());
    	chooser.addObject("Auto Routine A", new AutoRoutine1());
    	chooser.addObject("Auto Routine B", new AutoRoutine2());
    	SmartDashboard.putData("Auto Modes", chooser);
    	
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        flyWheel = new FlyWheel();
        hood = new Hood();
        turntable = new Turntable();
        intake = new Intake();
        indexer = new Indexer();
        winch = new Winch();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
      
        //define cameras 
        /*
        frame = NIVision.imaqCreateImage(NIVision.ImageType.IMAGE_RGB, 0);

        sessionfront = NIVision.IMAQdxOpenCamera("cam1", NIVision.IMAQdxCameraControlMode.CameraControlModeController);
                
        sessionback = NIVision.IMAQdxOpenCamera("cam2", NIVision.IMAQdxCameraControlMode.CameraControlModeController);

        currSession = sessionfront;

        NIVision.IMAQdxConfigureGrab(currSession); 
        */
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // Place the names of each command here again, with the autonomousCommand being = to the name of the command that we want to run.
    	// be sure to include a new case each time, and to break at after each command, as shown below.
    	mode = (int) chooser.getSelected();
    	switch(mode) {
    	case 1:
    		autonomousCommand = new AutonomousCommand();
    		break;
    	case 2:
    		autonomousCommand = new AutoRoutine1();
    		break;
    	case 3:
    		autonomousCommand = new AutoRoutine2();
    		break;
    	}
    	
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
    	// Drivetrain
    	SmartDashboard.putInt("Drivetrain Encoder Value", Robot.driveTrain.readTheEncoder());
    	// Winch
    	SmartDashboard.putInt("N Value", Robot.winch.n);
    	// Turntable
    	SmartDashboard.putDouble("Turntable Pot Value", Robot.turntable.turnTableDirectionPot());
    	SmartDashboard.putBoolean("Turntable Prox Value", Robot.turntable.turnTableProx());
    	// Flywheel
    	SmartDashboard.putDouble("Flywheel Encoder Value", Robot.flyWheel.readEncoder());
    	// Hood
    	SmartDashboard.putDouble("Hood Pot Value", Robot.hood.readHoodHeight());
    	// Intake
    	SmartDashboard.putBoolean("Button 4 State", Robot.oi.intakeButtonCall());
    	
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
