// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2130.Behemoth.subsystems;

import org.usfirst.frc2130.Behemoth.Robot;
import org.usfirst.frc2130.Behemoth.RobotMap;
import org.usfirst.frc2130.Behemoth.commands.*;

import com.ctre.CANTalon;

import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.TalonSRX;

import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 *
 */
public class Turntable extends PIDSubsystem {
	
	public int tolerance = 2;
	public double ap = 0.1;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AnalogPotentiometer turnTablePot = RobotMap.turntableturnTablePot;
    private final DigitalInput limitProx = RobotMap.turntableLimitProx;
    private final CANTalon turnTableMotor = RobotMap.turntableturnTableMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Initialize your subsystem here
    public Turntable() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("Turntable", 1.0, 0.0, 0.0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("Turntable", "PIDSubsystem Controller", getPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new ManualTurntableControl());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return turnTablePot.get();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        turnTableMotor.pidWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
    
    // TurnTable
    
        public double turnTableDirectionPot() {
		     return turnTablePot.get();
     	}

        public boolean turnTableProx() {
         return	!limitProx.get();
        }
        
    // Turn Table Saturate
        
        public void setWithSaturate(double desiredOuput) {
            double limitedOutput = desiredOuput;
            if(turnTableDirectionPot() > 50 && limitedOutput <  0 && this.turnTableProx()) {
                limitedOutput = 0;
            }
            if(turnTableDirectionPot() > 48 && limitedOutput < 0 && !this.turnTableProx()) {
            	limitedOutput = limitedOutput * 0.5;
            }
            if(turnTableDirectionPot() < 30 && limitedOutput > 0 && !this.turnTableProx()) {
            	limitedOutput = limitedOutput * 0.5;
            }
            if(turnTableDirectionPot() < 28 && limitedOutput > 0 && this.turnTableProx()) {
                limitedOutput = 0;
            }
            // the arm goes up when outputs are negative, so we need to be sure to negate
            // this value.
            turnTableMotor.set(limitedOutput);
        }
        
        public void saturatedJoystick() {
    		double desiredOutput = (Robot.oi.operatorJoy.getRawAxis(4));
    		setWithSaturate(desiredOutput);
    	}
}
