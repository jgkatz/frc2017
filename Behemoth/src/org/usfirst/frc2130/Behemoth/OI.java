// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2130.Behemoth;

import org.usfirst.frc2130.Behemoth.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc2130.Behemoth.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton loopOnButton;
    public JoystickButton loopOffButton;
    public JoystickButton reachFiringRPMButton;
    public JoystickButton fireFuelButton;
    public JoystickButton intakeButton;
    public Joystick operatorJoy;
    public JoystickButton highGearButton;
    public JoystickButton lowGearButton;
    public JoystickButton deployWinchButton;
    public JoystickButton runWinchButton;
    public JoystickButton winchSafetyKillButton;
    public Joystick driverJoy;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        driverJoy = new Joystick(1);
        
        winchSafetyKillButton = new JoystickButton(driverJoy, 7);
        winchSafetyKillButton.whenPressed(new DisengageWinch());
        runWinchButton = new JoystickButton(driverJoy, 2);
        runWinchButton.whenPressed(new RunWinch());
        deployWinchButton = new JoystickButton(driverJoy, 1);
        deployWinchButton.whenPressed(new EngageWinch());
        lowGearButton = new JoystickButton(driverJoy, 6);
        lowGearButton.whenPressed(new shiftToLowGear());
        highGearButton = new JoystickButton(driverJoy, 5);
        highGearButton.whenPressed(new shiftToHighGear());
        operatorJoy = new Joystick(0);
        
        intakeButton = new JoystickButton(operatorJoy, 9);
        intakeButton.whileHeld(new intakeIn());
        fireFuelButton = new JoystickButton(operatorJoy, 6);
        fireFuelButton.whileHeld(new indexerFeed());
        reachFiringRPMButton = new JoystickButton(operatorJoy, 5);
        reachFiringRPMButton.whileHeld(new AquireFlywheelRPM());
        loopOffButton = new JoystickButton(operatorJoy, 2);
        loopOffButton.whenPressed(new KillTowerSearch());
        loopOnButton = new JoystickButton(operatorJoy, 1);
        loopOnButton.whenPressed(new findTower());


        // SmartDashboard Buttons

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getOperatorJoy() {
        return operatorJoy;
    }

    public Joystick getDriverJoy() {
        return driverJoy;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    
    // The only time that we need to reference a button, as we have below, is in the 
    // "isFinished" portion of a command that runs while a button is held. The call will read as 
    // "return Robot.oi.NAMEOFBUTTONCALL" 
    
     public boolean winchButtonCall() {
    	return runWinchButton.get();
    }
     
    public boolean firingRPMButtonCall() {
    	return reachFiringRPMButton.get();
    }
    
    public boolean fireButtonCall() {
    	return fireFuelButton.get();
    }
    
    public boolean intakeButtonCall() {
    	return intakeButton.get();
    }
}
