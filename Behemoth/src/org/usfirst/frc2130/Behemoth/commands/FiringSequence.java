// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2130.Behemoth.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.CommandGroup;
import org.usfirst.frc2130.Behemoth.subsystems.*;

/**
 *
 */
public class FiringSequence extends CommandGroup {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public FiringSequence() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
    	
    	// NOTE: This command group is in its alpha stage, and the times have yet to be finalized.
    	//       feel free to change them throughout the testing process.
    	
    	// This command group can be found in the "feederCommand" command, and runs as follows:
    	
    	// This clears any excess fuel from the flywheel's, to ensure a consistent base firing RPM
        // every time that we run this command.
    	addSequential(new indexerClear(), 2);
    	// The next two parts of the code make sure that the indexers come to a near complete stop before moving,
    	// to reduce wear and heat build up on the motors.
    	Timer.delay(2);
    	addSequential(new IndexerStop(), 1);
    	// Runs the motors in the opposite, now positive direction, in the flywheel. This command can be referenced in the indexer 
    	// subsystem, and will not run until the flywheels are above a pre-defined speed.
    	addSequential(new FeederCommand());
    } 
}
